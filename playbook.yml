---
  - name: Init Swarm Master
    hosts: masters
    become: true
    gather_facts: False
    tasks:
      - name: determine swarm status
        shell: >
          docker info | egrep '^Swarm: ' | cut -d ' ' -f2
        register: swarm_status

      - name: set authorized key for deployment
        authorized_key:
          user: root
          state: present
          key: "{{ deploy_pub_key }}"

      - name: swarm init
        command: docker swarm init --advertise-addr {{ private_ip }}
        when: "'active' not in swarm_status.stdout_lines"

      - name: get worker token
        command: docker swarm join-token worker -q
        register: worker_token

      - name: get master token
        command: docker swarm join-token manager -q
        register: master_token

  - name: Join Swarm Cluster
    hosts: workers
    become: true
    gather_facts: False
    vars:
      token: "{{ hostvars[groups['masters'][0]]['worker_token']['stdout'] }}"
      master: "{{ hostvars[groups['masters'][0]]['private_ip'] }}"
    tasks:
      - name: determine swarm status
        shell: >
          docker info | egrep '^Swarm: ' | cut -d ' ' -f2
        register: swarm_status

      - name: join swarm cluster as a worker
        command: docker swarm join --token {{ token }} {{ master }}:2377
        register: worker
        when: "'active' not in swarm_status.stdout_lines"

  - name: Create Storidge Cluster
    hosts: masters
    become: true
    gather_facts: False
    tasks:
      - name: get join token from active cluster
        shell: >
          cioctl join-token | awk '/cioctl join/ {print $5}'
        register: jointoken

      - name: create cluster
        shell: >
          cioctl create --ip {{ private_ip }} | awk '/cioctl join/ {print $4}'
        register: clustertoken
        when: "jointoken.stdout == ''"

  - name: Join Storidge Nodes
    hosts: workers
    become: true
    gather_facts: False
    vars:
      clustertoken: "{{ hostvars[groups['masters'][0]]['clustertoken'] }}"
      jointoken: "{{ hostvars[groups['masters'][0]]['jointoken'] }}"
      master: "{{ hostvars[groups['masters'][0]]['private_ip'] }}"
    tasks:
      - name: check if already a cluster member
        stat:
          path: /etc/storidge/nodeid
        register: nodeid

      - name: join nodes to cio cluster
        command: "cioctl join {{ master }} {{ clustertoken.stdout|default(jointoken.stdout) }} --ip {{ private_ip }}"
        register: result
        until: result.stdout.find("Adding this node") != -1
        retries: 5
        delay: 1

  - name: Initialize Storidge Cluster
    hosts: masters
    become: true
    gather_facts: False
    vars:
      clustertoken: "{{ hostvars[groups['masters'][0]]['clustertoken'] }}"
    tasks:
      - name: cioctl init
        command: "cioctl init {{ clustertoken.stdout.split('-')[1] }}"
        register: clusterinit
        when: "clustertoken is not skipped"

      - name: show cluster init output
        debug: var=clusterinit.stdout

      - name: show cluster init error
        debug: var=clusterinit.stderr
